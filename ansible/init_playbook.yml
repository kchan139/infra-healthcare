---
- name: Provision Microservices Server
  hosts: all
  become: yes
  gather_facts: yes

  var_files:
    - vars/password.yml

  pre_tasks:
    - name: Stop and mask automatic update services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        masked: yes
      loop:
        - unattended-upgrades
        - apt-daily.service
        - apt-daily.timer
        - apt-daily-upgrade.service
        - apt-daily-upgrade.timer
      ignore_errors: yes

    - name: Wait a moment for processes to fully stop
      ansible.builtin.pause:
        seconds: 5

    - name: Remove any stale lock files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/dpkg/lock
        - /var/lib/dpkg/lock-frontend
        - /var/cache/apt/archives/lock
      ignore_errors: yes

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
        lock_timeout: 300
      register: apt_update
      retries: 3
      delay: 10
      until: apt_update is succeeded

  tasks:
    # --- Package Installation ---
    - name: Install prerequisites and CLI tools
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - htop
          - tree
          - bat
          - net-tools
          - neofetch
          - nginx
        state: present
        lock_timeout: 300
      register: apt_prereqs
      retries: 3
      delay: 10
      until: apt_prereqs is succeeded

    - name: Symlink batcat to bat
      ansible.builtin.file:
        src: /usr/bin/batcat
        dest: /usr/local/bin/bat
        state: link
      when: ansible_facts['distribution'] == 'Ubuntu'

    # --- User Management ---
    - name: Create non-root user 'khoa'
      ansible.builtin.user:
        name: khoa
        state: present
        shell: /bin/bash
        create_home: yes
        groups: sudo
        append: yes
        password: "{{ khoa_password | password_hash('sha512') }}"

    - name: Create .ssh directory for khoa
      ansible.builtin.file:
        path: /home/khoa/.ssh
        state: directory
        owner: khoa
        group: khoa
        mode: "0700"

    - name: Copy root's authorized_keys to khoa
      ansible.builtin.copy:
        src: /root/.ssh/authorized_keys
        dest: /home/khoa/.ssh/authorized_keys
        owner: khoa
        group: khoa
        mode: "0600"
        remote_src: yes

    # --- SSH Configuration ---
    - name: Disable ssh.socket
      ansible.builtin.systemd:
        name: ssh.socket
        state: stopped
        enabled: no

    - name: Change SSH port to {{ ssh_port }}
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?Port"
        line: "Port {{ ssh_port }}"
        backup: yes

    - name: Disable password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"

    - name: Disable root login
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"

    - name: Enable PAM
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?UsePAM"
        line: "UsePAM yes"

    - name: Validate SSH config
      ansible.builtin.command: sshd -t

    - name: Reload SSH service
      ansible.builtin.systemd:
        name: ssh
        state: restarted

    # --- Firewall Configuration ---
    - name: Set UFW default incoming policy to deny
      community.general.ufw:
        direction: incoming
        policy: deny

    - name: Set UFW default outgoing policy to allow
      community.general.ufw:
        direction: outgoing
        policy: allow

    - name: Limit SSH (custom port)
      community.general.ufw:
        rule: limit
        port: "{{ ssh_port }}"
        proto: tcp

    - name: Allow HTTP
      community.general.ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Allow HTTPS
      community.general.ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Enable UFW
      community.general.ufw:
        state: enabled

    # --- Nginx Configuration ---
    - name: Start and enable nginx
      ansible.builtin.systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Copy nginx configuration
      ansible.builtin.copy:
        src: ../nginx/reverse_proxy.conf
        dest: /etc/nginx/sites-available/default
        owner: root
        group: root
        mode: "0644"
        backup: yes

    - name: Test nginx configuration
      ansible.builtin.command: nginx -t
      register: nginx_test
      failed_when: nginx_test.rc != 0

    - name: Reload nginx
      ansible.builtin.systemd:
        name: nginx
        state: reloaded
      when: nginx_test.rc == 0

    # --- Microservices Directory Setup ---
    - name: Create microservices directory
      ansible.builtin.file:
        path: /opt/microservices
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy docker-swarm directory to /opt/microservices
      ansible.builtin.copy:
        src: ../docker-swarm/
        dest: /opt/microservices/
        owner: root
        group: root
        mode: preserve
        backup: yes

    - name: Make shell scripts executable
      ansible.builtin.file:
        path: "/opt/microservices/scripts/{{ item }}"
        mode: "0755"
      loop:
        - cleanup.sh
        - deploy.sh
        - logs.sh
        - remove.sh

    # --- Docker Installation ---
    - name: Create directory for Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download Docker GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.gpg
        mode: "0644"

    - name: Add Docker GPG key
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
        chmod 644 /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_facts['lsb']['codename'] }} stable"
        state: present
        filename: docker

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
        lock_timeout: 300
      register: apt_docker
      retries: 3
      delay: 10
      until: apt_docker is succeeded

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user != 'root'

    # --- Shell Customization ---
    - name: Download Starship installation script
      ansible.builtin.get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/starship_install.sh
        mode: "0755"

    - name: Install Starship
      ansible.builtin.shell: /tmp/starship_install.sh --yes
      args:
        creates: /usr/local/bin/starship

    - name: Add Starship to bash profile for all users
      ansible.builtin.blockinfile:
        path: /etc/profile.d/starship.sh
        create: yes
        mode: "0755"
        block: |
          # Initialize Starship prompt
          if command -v starship >/dev/null 2>&1; then
            eval "$(starship init bash)"
          fi
