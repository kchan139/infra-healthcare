---
- name: Provision Microservices Server
  hosts: all
  become: yes
  gather_facts: yes

  vars_files:
    - vars/password.yml

  pre_tasks:
    - name: Stop and mask automatic update services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        masked: yes
      loop:
        - unattended-upgrades
        - apt-daily.service
        - apt-daily.timer
        - apt-daily-upgrade.service
        - apt-daily-upgrade.timer
      ignore_errors: yes

    - name: Wait a moment for processes to fully stop
      ansible.builtin.pause:
        seconds: 5

    - name: Remove any stale lock files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/dpkg/lock
        - /var/lib/dpkg/lock-frontend
        - /var/cache/apt/archives/lock
      ignore_errors: yes

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
        lock_timeout: 300
      register: apt_update
      retries: 3
      delay: 10
      until: apt_update is succeeded

  tasks:
    # --- Package Installation ---
    - name: Install prerequisites and CLI tools
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - htop
          - tree
          - bat
          - net-tools
          - neofetch
          - nginx
          - nghttp2-client
        state: present
        lock_timeout: 300
      register: apt_prereqs
      retries: 3
      delay: 10
      until: apt_prereqs is succeeded

    - name: Symlink batcat to bat
      ansible.builtin.file:
        src: /usr/bin/batcat
        dest: /usr/local/bin/bat
        state: link
      when: ansible_facts['distribution'] == 'Ubuntu'

    # --- User Management ---
    - name: Create non-root user 'khoa'
      ansible.builtin.user:
        name: khoa
        state: present
        shell: /bin/bash
        create_home: yes
        groups: sudo
        append: yes
        password: "{{ khoa_password | password_hash('sha512') }}"

    - name: Create .ssh directory for khoa
      ansible.builtin.file:
        path: /home/khoa/.ssh
        state: directory
        owner: khoa
        group: khoa
        mode: "0700"

    - name: Copy root's authorized_keys to khoa
      ansible.builtin.copy:
        src: /root/.ssh/authorized_keys
        dest: /home/khoa/.ssh/authorized_keys
        owner: khoa
        group: khoa
        mode: "0600"
        remote_src: yes

    # --- SSH Configuration ---
    - name: Disable ssh.socket
      ansible.builtin.systemd:
        name: ssh.socket
        state: stopped
        enabled: no

    - name: Change SSH port to {{ ssh_port }}
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?Port"
        line: "Port {{ ssh_port }}"
        backup: yes

    - name: Disable password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"

    - name: Disable root login
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"

    - name: Enable PAM
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?UsePAM"
        line: "UsePAM yes"

    - name: Validate SSH config
      ansible.builtin.command: sshd -t

    - name: Reload SSH service
      ansible.builtin.systemd:
        name: ssh
        state: restarted

    # --- Firewall Configuration ---
    - name: Set UFW default incoming policy to deny
      community.general.ufw:
        direction: incoming
        policy: deny

    - name: Set UFW default outgoing policy to allow
      community.general.ufw:
        direction: outgoing
        policy: allow

    - name: Limit SSH (custom port)
      community.general.ufw:
        rule: limit
        port: "{{ ssh_port }}"
        proto: tcp

    - name: Allow HTTP (port 80)
      community.general.ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Enable UFW
      community.general.ufw:
        state: enabled

    # --- Scripts Setup ---
    - name: Create scripts directory
      ansible.builtin.file:
        path: /opt/scripts
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy all scripts to server
      ansible.builtin.copy:
        src: ../scripts/
        dest: /opt/scripts/
        owner: root
        group: root
        mode: "0755"

    - name: Run IP restriction script to allow HTTPS only from Cloudflare
      ansible.builtin.shell: /opt/scripts/restrict-ips.sh
      register: restrict_result

    - name: Display IP restriction results
      ansible.builtin.debug:
        var: restrict_result.stdout_lines

    # --- Dynamic Cloudflare IP Configuration ---
    - name: Create nginx conf.d directory
      ansible.builtin.file:
        path: /etc/nginx/conf.d
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy Cloudflare IP updater script
      ansible.builtin.copy:
        src: ../scripts/update-ips-nginx.sh
        dest: /opt/scripts/update-ips-nginx.sh
        owner: root
        group: root
        mode: "0755"

    - name: Generate initial Cloudflare IPs configuration
      ansible.builtin.command: /opt/scripts/update-ips-nginx.sh
      register: cf_ip_result

    - name: Display Cloudflare IP update results
      ansible.builtin.debug:
        var: cf_ip_result.stdout_lines

    - name: Set up weekly Cloudflare IP updates
      ansible.builtin.cron:
        name: "Update Cloudflare IPs for nginx"
        minute: "0"
        hour: "2"
        weekday: "1"
        job: "/opt/scripts/update-ips-nginx.sh"
        user: root

    - name: Set up weekly UFW Cloudflare IP updates
      ansible.builtin.cron:
        name: "Update UFW Cloudflare IP restrictions"
        minute: "30"
        hour: "2"
        weekday: "1"
        job: "/opt/scripts/restrict-ips.sh"
        user: root

    # --- SSL/TLS Certificate Setup ---
    - name: Install certbot and nginx plugin
      ansible.builtin.apt:
        name:
          - certbot
          - python3-certbot-nginx
        state: present
        lock_timeout: 300
      register: apt_certbot
      retries: 3
      delay: 10
      until: apt_certbot is succeeded

    - name: Generate Let's Encrypt certificate
      ansible.builtin.command: >
        certbot --nginx --non-interactive --agree-tos
        --email {{ letsencrypt_email }}
        --domains {{ domain_name }}
        --redirect
      register: certbot_result
      failed_when: certbot_result.rc != 0

    - name: Display certificate generation results
      ansible.builtin.debug:
        var: certbot_result.stdout_lines

    - name: Set up automatic certificate renewal
      ansible.builtin.cron:
        name: "Renew Let's Encrypt certificates"
        minute: "0"
        hour: "12"
        job: "/usr/bin/certbot renew --quiet"

    # --- Nginx Configuration ---
    - name: Start and enable nginx
      ansible.builtin.systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Copy nginx configuration
      ansible.builtin.copy:
        src: ../nginx/reverse_proxy.conf
        dest: /etc/nginx/sites-available/default
        owner: root
        group: root
        mode: "0644"
        backup: yes

    - name: Copy HTML files to web directory
      ansible.builtin.copy:
        src: ../nginx/html/
        dest: /var/www/html/
        owner: www-data
        group: www-data
        mode: "0644"
        backup: yes

    - name: Test nginx configuration
      ansible.builtin.command: nginx -t
      register: nginx_test
      failed_when: nginx_test.rc != 0

    - name: Reload nginx
      ansible.builtin.systemd:
        name: nginx
        state: reloaded
      when: nginx_test.rc == 0

    # --- Microservices Directory Setup ---
    - name: Create microservices directory
      ansible.builtin.file:
        path: /opt/microservices
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy swarm directory to /opt/microservices
      ansible.builtin.copy:
        src: ../swarm/
        dest: /opt/microservices/
        owner: root
        group: root
        mode: preserve
        backup: yes

    - name: Make shell scripts executable
      ansible.builtin.file:
        path: "/opt/microservices/scripts/{{ item }}"
        mode: "0755"
      loop:
        - cleanup.sh
        - deploy.sh
        - logs.sh
        - remove.sh

    # --- Docker Installation ---
    - name: Create directory for Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download Docker GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.gpg
        mode: "0644"

    - name: Add Docker GPG key
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
        chmod 644 /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_facts['lsb']['codename'] }} stable"
        state: present
        filename: docker

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
        lock_timeout: 300
      register: apt_docker
      retries: 3
      delay: 10
      until: apt_docker is succeeded

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user != 'root'

    - name: Check if Swarm is already active
      ansible.builtin.command: docker info
      register: docker_info_result

    - name: Initialize Docker Swarm if not active
      ansible.builtin.command: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      when: "'Swarm: active' not in docker_info_result.stdout"
      register: swarm_init_result
      changed_when: "'Swarm initialized' in swarm_init_result.stdout"

    # --- Docker Secrets Management ---
    - name: Check existing Docker secrets
      ansible.builtin.shell: docker secret ls --format '{{ "{{.Name}}" }}'
      register: existing_secrets
      changed_when: false

    - name: Create Docker secret 'db_password' if not exists
      ansible.builtin.shell: echo "{{ db_password }}" | docker secret create db_password -
      when: "'db_password' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'db_username' if not exists
      ansible.builtin.shell: echo "{{ db_username }}" | docker secret create db_username -
      when: "'db_username' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'db_url' (IAM service) if not exists
      ansible.builtin.shell: echo "{{ iam_db_url }}" | docker secret create db_url -
      when: "'db_url' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'patient_db_url' if not exists
      ansible.builtin.shell: echo "{{ patient_db_url }}" | docker secret create patient_db_url -
      when: "'patient_db_url' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'testorder_db_url' if not exists
      ansible.builtin.shell: echo "{{ testorder_db_url }}" | docker secret create testorder_db_url -
      when: "'testorder_db_url' not in existing_secrets.stdout_lines"
      no_log: true

    # --- Shell Customization ---
    - name: Download Starship installation script
      ansible.builtin.get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/starship_install.sh
        mode: "0755"

    - name: Install Starship
      ansible.builtin.shell: /tmp/starship_install.sh --yes
      args:
        creates: /usr/local/bin/starship

    - name: Add Starship to bash profile for all users
      ansible.builtin.blockinfile:
        path: /etc/profile.d/starship.sh
        create: yes
        mode: "0755"
        block: |
          # Initialize Starship prompt
          if command -v starship >/dev/null 2>&1; then
            eval "$(starship init bash)"
          fi

    # --- HELIX --- #
    - name: Add Helix PPA
      ansible.builtin.apt_repository:
        repo: ppa:maveonair/helix-editor
        state: present

    - name: Install Helix
      ansible.builtin.apt:
        name: helix
        state: present
        update_cache: yes
