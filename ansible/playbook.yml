---
- name: Docker Swarm + secrets
  hosts: all
  become: true
  gather_facts: true

  tasks:
    - name: Check if Swarm is already active
      ansible.builtin.command: docker info
      register: docker_info_result

# === Manager Setup ===
- name: Initialize Swarm on manager node
  hosts: manager
  become: true
  tasks:
    - name: Initialize Docker Swarm
      ansible.builtin.command: docker swarm init --advertise-addr {{ ansible_eth1.ipv4.address }}
      # --advertise-addr {{ hostvars[inventory_hostname]['ansible_all_ipv4_addresses'] | select('match', '10.100.*') | first }}
      register: swarm_init_result
      changed_when: "'Swarm initialized' in swarm_init_result.stdout"
      failed_when: >
        swarm_init_result.rc != 0 and
        'already part of a swarm' not in swarm_init_result.stderr

    - name: Get Swarm worker join token
      ansible.builtin.command: docker swarm join-token -q worker
      register: swarm_worker_token

# === Workers Setup ===
- name: Join Swarm on worker nodes
  hosts: workers
  become: true
  tasks:
    - name: Set swarm worker token from manager
      ansible.builtin.set_fact:
        swarm_worker_token: "{{ hostvars[groups['manager'][0]].swarm_worker_token.stdout }}"

    - name: Check if node is already part of a swarm
      ansible.builtin.shell: |
        docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_state
      changed_when: false

    - name: Join Docker Swarm
      ansible.builtin.command: >
        docker swarm join --token {{ swarm_worker_token }}
        {{ hostvars[groups['manager'][0]].ansible_eth1.ipv4.address }}:2377
      when: swarm_state.stdout.strip() not in ["active", "pending"]
      register: swarm_join_result
      changed_when: "'This node joined a swarm as a worker' in swarm_join_result.stdout"
      failed_when: swarm_join_result.rc != 0 and
        'already part of a swarm' not in swarm_join_result.stderr

# === Docker Secrets ===
- name: Create Docker secrets on manager
  hosts: manager
  become: true

  vars_files:
    - vars/secrets.yml

  tasks:
    - name: Check existing Docker secrets
      ansible.builtin.shell: docker secret ls --format '{{ "{{.Name}}" }}'
      register: existing_secrets
      changed_when: false

    - name: Set docker_secrets dictionary from vars
      ansible.builtin.set_fact:
        docker_secrets:
          {
            db_password: "{{ db_password }}",
            db_username: "{{ db_username }}",
            iam_db_url: "{{ iam_db_url }}",
            patient_db_url: "{{ patient_db_url }}",
            testorder_db_url: "{{ testorder_db_url }}",
            resend_api_key: "{{ resend_api_key }}",
            mongodb_uri: "{{ mongodb_uri }}",
            rabbitmq_host: "{{ rabbitmq_host }}",
            rabbitmq_port: "{{ rabbitmq_port }}",
            rabbitmq_username: "{{ rabbitmq_username }}",
            rabbitmq_password: "{{ rabbitmq_password }}",
            rabbitmq_vhost: "{{ rabbitmq_vhost }}",
            spaces_access_key: "{{ spaces_access_key }}",
            spaces_secret_key: "{{ spaces_secret_key }}",
            jwt_secret: "{{ jwt_secret }}",
            app_secret_key: "{{ app_secret_key }}",
          }

    - name: Create Docker secret "{{ item.key }}" if not exists
      ansible.builtin.shell: printf '%s' "{{ item.value }}" | docker secret create {{ item.key }} -
      when: item.key not in existing_secrets.stdout_lines
      loop: "{{ docker_secrets | dict2items }}"
      no_log: true
