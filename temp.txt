On branch main
Changes not staged for commit:
	deleted:    ansible/init_playbook.yml
	modified:   ansible/scripts/init.sh
	modified:   ansible/scripts/re-run.sh
	deleted:    nginx/html/favicon.ico
	deleted:    nginx/html/robots.txt
	deleted:    nginx/html/welcome.html
	deleted:    nginx/nginx.conf
	modified:   scripts/update-ips-nginx.sh
	modified:   swarm/compose.yml
	deleted:    terraform/keys/anh.pub
	deleted:    terraform/keys/khoadesktop.pub
	deleted:    terraform/keys/khoalaptop.pub
	modified:   terraform/main.tf
	deleted:    terraform/scripts/apply.sh
	deleted:    terraform/scripts/destroy.sh

Untracked files:
	ansible/playbook.yml
	swarm/nginx/html/favicon.ico
	swarm/nginx/html/robots.txt
	swarm/nginx/html/welcome.html
	swarm/nginx/nginx.conf
	swarm/nginx/wait-for-dns.sh
	temp.txt
	terraform/variables.tf

no changes added to commit
---
- name: Provision Microservices Server
  hosts: all
  become: true
  gather_facts: true

  vars_files:
    - vars/password.yml

  pre_tasks:
    - name: Stop and mask automatic update services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        masked: yes
      loop:
        - unattended-upgrades
        - apt-daily.service
        - apt-daily.timer
        - apt-daily-upgrade.service
        - apt-daily-upgrade.timer
      ignore_errors: true

    - name: Wait a moment for processes to fully stop
      ansible.builtin.pause:
        seconds: 5

    - name: Remove any stale lock files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/dpkg/lock
        - /var/lib/dpkg/lock-frontend
        - /var/cache/apt/archives/lock
      ignore_errors: true

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
        lock_timeout: 300
      register: apt_update
      retries: 3
      delay: 10
      until: apt_update is succeeded

  tasks:
    - name: Install prerequisites and CLI tools
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - btop
          - tree
          - bat
          - net-tools
          - neofetch
        state: present
        lock_timeout: 300
      register: apt_prereqs
      retries: 3
      delay: 10
      until: apt_prereqs is succeeded

    - name: Symlink batcat to bat
      ansible.builtin.file:
        src: /usr/bin/batcat
        dest: /usr/local/bin/bat
        state: link
      when: ansible_facts['distribution'] == 'Ubuntu'

    - name: Set timezone to Asia/Ho_Chi_Minh
      ansible.builtin.timezone:
        name: Asia/Ho_Chi_Minh

    - name: Create non-root user 'khoa'
      ansible.builtin.user:
        name: khoa
        state: present
        shell: /bin/bash
        create_home: yes
        groups: sudo
        append: yes
        password: "{{ khoa_password | password_hash('sha512') }}"

    - name: Create .ssh directory for khoa
      ansible.builtin.file:
        path: /home/khoa/.ssh
        state: directory
        owner: khoa
        group: khoa
        mode: "0700"

    - name: Copy root's authorized_keys to khoa
      ansible.builtin.copy:
        src: /root/.ssh/authorized_keys
        dest: /home/khoa/.ssh/authorized_keys
        owner: khoa
        group: khoa
        mode: "0600"
        remote_src: yes

    - name: Disable ssh.socket
      ansible.builtin.systemd:
        name: ssh.socket
        state: stopped
        enabled: no

    - name: Change SSH port to {{ ssh_port }}
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?Port"
        line: "Port {{ ssh_port }}"
        backup: yes

    - name: Disable password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"

    - name: Disable root login
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"

    - name: Enable PAM
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?UsePAM"
        line: "UsePAM yes"

    - name: Validate SSH config
      ansible.builtin.command: sshd -t

    - name: Reload SSH service
      ansible.builtin.systemd:
        name: ssh
        state: restarted

    - name: Set UFW default incoming policy to deny
      community.general.ufw:
        direction: incoming
        policy: deny

    - name: Set UFW default outgoing policy to allow
      community.general.ufw:
        direction: outgoing
        policy: allow

    - name: Limit SSH (custom port)
      community.general.ufw:
        rule: limit
        port: "{{ ssh_port }}"
        proto: tcp

    - name: Allow HTTP (port 80)
      community.general.ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Allow HTTPS (port 443)
      community.general.ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Enable UFW
      community.general.ufw:
        state: enabled

    - name: Create scripts directory
      ansible.builtin.file:
        path: /opt/scripts
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy all scripts to server
      ansible.builtin.copy:
        src: ../scripts/
        dest: /opt/scripts/
        owner: root
        group: root
        mode: "0755"

    - name: Create microservices directory
      ansible.builtin.file:
        path: /opt/microservices
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy swarm directory to /opt/microservices
      ansible.builtin.copy:
        src: ../swarm/
        dest: /opt/microservices/
        owner: root
        group: root
        mode: preserve
        backup: yes

    - name: Make shell scripts executable
      ansible.builtin.file:
        path: "/opt/microservices/scripts/{{ item }}"
        mode: "0755"
      loop:
        - cleanup.sh
        - deploy.sh
        - logs.sh
        - remove.sh

    - name: Create directory for Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download Docker GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.gpg
        mode: "0644"

    - name: Add Docker GPG key
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
        chmod 644 /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_facts['lsb']['codename'] }} stable"
        state: present
        filename: docker

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
        lock_timeout: 300
      register: apt_docker
      retries: 3
      delay: 10
      until: apt_docker is succeeded

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user != 'root'

    - name: Create certbot directories
      ansible.builtin.file:
        path: "/opt/microservices/certbot/{{ item }}"
        state: directory
        mode: "0755"
        recurse: true
      loop:
        - conf

    - name: Create Cloudflare credentials file for Certbot
      ansible.builtin.copy:
        dest: /opt/microservices/certbot/cloudflare.ini
        content: |
          dns_cloudflare_api_token = {{ cloudflare_api_token }}
        mode: "0600"

    - name: Generate TLS certificates with Certbot using DNS (Cloudflare)
      ansible.builtin.shell: |
        docker run --rm \
          -v /opt/microservices/certbot/conf:/etc/letsencrypt \
          -v /opt/microservices/certbot/cloudflare.ini:/cloudflare.ini \
          certbot/dns-cloudflare certonly \
          --dns-cloudflare \
          --dns-cloudflare-credentials /cloudflare.ini \
          --dns-cloudflare-propagation-seconds 30 \
          -d {{ domain_name }} \
          --email {{ letsencrypt_email }} \
          --agree-tos --no-eff-email \
          --non-interactive
      args:
        creates: /opt/microservices/certbot/conf/live/{{ domain_name }}/fullchain.pem
      register: certbot_result
      changed_when: "'Congratulations!' in certbot_result.stdout"

    - name: Login to GitLab Container Registry
      ansible.builtin.shell: |
        echo "{{ gitlab_token }}" | docker login registry.gitlab.com -u "{{ gitlab_token }}" --password-stdin
      no_log: true

    - name: Check if Swarm is already active
      ansible.builtin.command: docker info
      register: docker_info_result

    - name: Initialize Docker Swarm if not active
      ansible.builtin.command: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      when: "'Swarm: active' not in docker_info_result.stdout"
      register: swarm_init_result
      changed_when: "'Swarm initialized' in swarm_init_result.stdout"

    - name: Check existing Docker secrets
      ansible.builtin.shell: docker secret ls --format '{{ "{{.Name}}" }}'
      register: existing_secrets
      changed_when: false

    - name: Create Docker secret 'db_password' if not exists
      ansible.builtin.shell: echo "{{ db_password }}" | docker secret create db_password -
      when: "'db_password' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'db_username' if not exists
      ansible.builtin.shell: echo "{{ db_username }}" | docker secret create db_username -
      when: "'db_username' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'db_url' (IAM service) if not exists
      ansible.builtin.shell: echo "{{ iam_db_url }}" | docker secret create db_url -
      when: "'db_url' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'patient_db_url' if not exists
      ansible.builtin.shell: echo "{{ patient_db_url }}" | docker secret create patient_db_url -
      when: "'patient_db_url' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'testorder_db_url' if not exists
      ansible.builtin.shell: echo "{{ testorder_db_url }}" | docker secret create testorder_db_url -
      when: "'testorder_db_url' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'smtp_username' if not exists
      ansible.builtin.shell: echo "{{ smtp_username }}" | docker secret create smtp_username -
      when: "'smtp_username' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'smtp_password' if not exists
      ansible.builtin.shell: echo "{{ smtp_password }}" | docker secret create smtp_password -
      when: "'smtp_password' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Download Starship installation script
      ansible.builtin.get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/starship_install.sh
        mode: "0755"

    - name: Install Starship
      ansible.builtin.shell: /tmp/starship_install.sh --yes
      args:
        creates: /usr/local/bin/starship

    - name: Add Starship to bash profile for all users
      ansible.builtin.blockinfile:
        path: /etc/profile.d/starship.sh
        create: yes
        mode: "0755"
        block: |
          # Initialize Starship prompt
          if command -v starship >/dev/null 2>&1; then
            eval "$(starship init bash)"
          fi

    - name: Add Helix PPA
      ansible.builtin.apt_repository:
        repo: ppa:maveonair/helix-editor
        state: present

    - name: Install Helix
      ansible.builtin.apt:
        name: helix
        state: present
        update_cache: yes
events {}

http {
    limit_req_zone $binary_remote_addr zone=site_limit:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=2r/s;

    map $http_user_agent $block_bad_ua {
        default 0;
        "" 1;
        "~*curl|wget|python|Go-http-client|java|libwww|masscan|scanner|nmap|fetch|httpclient|sqlmap" 1;
    }

    # HTTP - Only used for redirect and Certbot challenge
    server {
        listen 80;
        server_name api.khoa.email;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS
    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name api.khoa.email;
        server_tokens off;

        resolver 1.1.1.1 8.8.8.8 valid=300s;
        resolver_timeout 5s;

        ssl_certificate     /etc/letsencrypt/live/api.khoa.email/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.khoa.email/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        client_max_body_size 10M;

        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        if ($block_bad_ua) {
            return 403;
        }

        if ($request_method !~ ^(GET|POST|HEAD|PUT|DELETE)$) {
            return 405;
        }

        location / {
            limit_req zone=site_limit burst=10 nodelay;
            limit_except GET HEAD { deny all; }

            root /var/www/html;
            index welcome.html index.html;
        }

        location = /index.html {
            limit_req zone=site_limit burst=10 nodelay;
            limit_except GET HEAD { deny all; }
            root /var/www/html;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
            root /var/www/html;
        }

        location /api/iam/ {
            limit_req zone=api_limit burst=5 nodelay;
            rewrite ^/api/iam/?(.*)$ /iam/$1 break;
            proxy_pass http://tasks.iam-service:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/patients/ {
            limit_req zone=api_limit burst=5 nodelay;
            rewrite ^/api/patients/?(.*)$ /patient/patients/$1 break;
            proxy_pass http://tasks.patient-service:8081;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/testorders/ {
            limit_req zone=api_limit burst=5 nodelay;
            rewrite ^/api/testorders/?(.*)$ /testorder/$1 break;
            proxy_pass http://tasks.testorder-service:8082;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Block hidden files and sensitive paths
        location ~ /\.(?!well-known) {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* ^/(actuator|env|metrics|beans|configprops|loggers|heapdump|threaddump|shutdown) {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* ^/api/.*/actuator {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* ^/(swagger-ui\.html|swagger-ui/|v3/api-docs|swagger-resources|webjars/springfox-swagger-ui) {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* /(b)?apply\.cgi {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* ^/\.well-known/security.txt {
            return 404;
            access_log off;
        }
    }
}
#!/bin/sh
set -e

echo "[wait-for-dns] Waiting for services dns to resolve..."

for i in $(seq 1 120); do
  if getent hosts tasks.patient-service > /dev/null; then
    echo "[wait-for-dns] DNS resolved!"
    break
  fi
  echo "[wait-for-dns] Still waiting..."
  sleep 1
done

echo "[wait-for-dns] Starting Nginx..."
exec nginx -g 'daemon off;'

variable "khoa_ssh_public_key" {
  description = "Khoa's SSH Public Key"
  type        = string
}

variable "anh_ssh_public_key" {
  description = "Tieu Anh's SSH Public Key"
  type        = string
}

variable "do_token" {
  description = "DigitalOcean API Token"
  type        = string
  sensitive   = true
}

variable "cloudflare_api_token" {
  description = "Cloudflare API Token"
  type        = string
  sensitive   = true
}

variable "cloudflare_zone_id" {
  description = "Cloudflare Zone ID"
  type        = string
  sensitive   = true
}
---
- name: Provision Microservices Server
  hosts: all
  become: true
  gather_facts: true

  vars_files:
    - vars/password.yml

  pre_tasks:
    - name: Stop and mask automatic update services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        masked: yes
      loop:
        - unattended-upgrades
        - apt-daily.service
        - apt-daily.timer
        - apt-daily-upgrade.service
        - apt-daily-upgrade.timer
      ignore_errors: true

    - name: Wait a moment for processes to fully stop
      ansible.builtin.pause:
        seconds: 5

    - name: Remove any stale lock files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/dpkg/lock
        - /var/lib/dpkg/lock-frontend
        - /var/cache/apt/archives/lock
      ignore_errors: true

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
        lock_timeout: 300
      register: apt_update
      retries: 3
      delay: 10
      until: apt_update is succeeded

  tasks:
    - name: Install prerequisites and CLI tools
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - btop
          - tree
          - bat
          - net-tools
          - neofetch
        state: present
        lock_timeout: 300
      register: apt_prereqs
      retries: 3
      delay: 10
      until: apt_prereqs is succeeded

    - name: Symlink batcat to bat
      ansible.builtin.file:
        src: /usr/bin/batcat
        dest: /usr/local/bin/bat
        state: link
      when: ansible_facts['distribution'] == 'Ubuntu'

    - name: Set timezone to Asia/Ho_Chi_Minh
      ansible.builtin.timezone:
        name: Asia/Ho_Chi_Minh

    - name: Create non-root user 'khoa'
      ansible.builtin.user:
        name: khoa
        state: present
        shell: /bin/bash
        create_home: yes
        groups: sudo
        append: yes
        password: "{{ khoa_password | password_hash('sha512') }}"

    - name: Create .ssh directory for khoa
      ansible.builtin.file:
        path: /home/khoa/.ssh
        state: directory
        owner: khoa
        group: khoa
        mode: "0700"

    - name: Copy root's authorized_keys to khoa
      ansible.builtin.copy:
        src: /root/.ssh/authorized_keys
        dest: /home/khoa/.ssh/authorized_keys
        owner: khoa
        group: khoa
        mode: "0600"
        remote_src: yes

    - name: Disable ssh.socket
      ansible.builtin.systemd:
        name: ssh.socket
        state: stopped
        enabled: no

    - name: Change SSH port to {{ ssh_port }}
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?Port"
        line: "Port {{ ssh_port }}"
        backup: yes

    - name: Disable password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"

    - name: Disable root login
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"

    - name: Enable PAM
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?UsePAM"
        line: "UsePAM yes"

    - name: Validate SSH config
      ansible.builtin.command: sshd -t

    - name: Reload SSH service
      ansible.builtin.systemd:
        name: ssh
        state: restarted

    - name: Set UFW default incoming policy to deny
      community.general.ufw:
        direction: incoming
        policy: deny

    - name: Set UFW default outgoing policy to allow
      community.general.ufw:
        direction: outgoing
        policy: allow

    - name: Limit SSH (custom port)
      community.general.ufw:
        rule: limit
        port: "{{ ssh_port }}"
        proto: tcp

    - name: Allow HTTP (port 80)
      community.general.ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Allow HTTPS (port 443)
      community.general.ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Enable UFW
      community.general.ufw:
        state: enabled

    - name: Create scripts directory
      ansible.builtin.file:
        path: /opt/scripts
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy all scripts to server
      ansible.builtin.copy:
        src: ../scripts/
        dest: /opt/scripts/
        owner: root
        group: root
        mode: "0755"

    - name: Create microservices directory
      ansible.builtin.file:
        path: /opt/microservices
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy swarm directory to /opt/microservices
      ansible.builtin.copy:
        src: ../swarm/
        dest: /opt/microservices/
        owner: root
        group: root
        mode: preserve
        backup: yes

    - name: Make shell scripts executable
      ansible.builtin.file:
        path: "/opt/microservices/scripts/{{ item }}"
        mode: "0755"
      loop:
        - cleanup.sh
        - deploy.sh
        - logs.sh
        - remove.sh

    - name: Create directory for Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download Docker GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /tmp/docker.gpg
        mode: "0644"

    - name: Add Docker GPG key
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
        chmod 644 /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_facts['lsb']['codename'] }} stable"
        state: present
        filename: docker

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
        lock_timeout: 300
      register: apt_docker
      retries: 3
      delay: 10
      until: apt_docker is succeeded

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user != 'root'

    - name: Create certbot directories
      ansible.builtin.file:
        path: "/opt/microservices/certbot/{{ item }}"
        state: directory
        mode: "0755"
        recurse: true
      loop:
        - conf

    - name: Create Cloudflare credentials file for Certbot
      ansible.builtin.copy:
        dest: /opt/microservices/certbot/cloudflare.ini
        content: |
          dns_cloudflare_api_token = {{ cloudflare_api_token }}
        mode: "0600"

    - name: Generate TLS certificates with Certbot using DNS (Cloudflare)
      ansible.builtin.shell: |
        docker run --rm \
          -v /opt/microservices/certbot/conf:/etc/letsencrypt \
          -v /opt/microservices/certbot/cloudflare.ini:/cloudflare.ini \
          certbot/dns-cloudflare certonly \
          --dns-cloudflare \
          --dns-cloudflare-credentials /cloudflare.ini \
          --dns-cloudflare-propagation-seconds 30 \
          -d {{ domain_name }} \
          --email {{ letsencrypt_email }} \
          --agree-tos --no-eff-email \
          --non-interactive
      args:
        creates: /opt/microservices/certbot/conf/live/{{ domain_name }}/fullchain.pem
      register: certbot_result
      changed_when: "'Congratulations!' in certbot_result.stdout"

    - name: Login to GitLab Container Registry
      ansible.builtin.shell: |
        echo "{{ gitlab_token }}" | docker login registry.gitlab.com -u "{{ gitlab_token }}" --password-stdin
      no_log: true

    - name: Check if Swarm is already active
      ansible.builtin.command: docker info
      register: docker_info_result

    - name: Initialize Docker Swarm if not active
      ansible.builtin.command: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      when: "'Swarm: active' not in docker_info_result.stdout"
      register: swarm_init_result
      changed_when: "'Swarm initialized' in swarm_init_result.stdout"

    - name: Check existing Docker secrets
      ansible.builtin.shell: docker secret ls --format '{{ "{{.Name}}" }}'
      register: existing_secrets
      changed_when: false

    - name: Create Docker secret 'db_password' if not exists
      ansible.builtin.shell: echo "{{ db_password }}" | docker secret create db_password -
      when: "'db_password' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'db_username' if not exists
      ansible.builtin.shell: echo "{{ db_username }}" | docker secret create db_username -
      when: "'db_username' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'db_url' (IAM service) if not exists
      ansible.builtin.shell: echo "{{ iam_db_url }}" | docker secret create db_url -
      when: "'db_url' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'patient_db_url' if not exists
      ansible.builtin.shell: echo "{{ patient_db_url }}" | docker secret create patient_db_url -
      when: "'patient_db_url' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'testorder_db_url' if not exists
      ansible.builtin.shell: echo "{{ testorder_db_url }}" | docker secret create testorder_db_url -
      when: "'testorder_db_url' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'smtp_username' if not exists
      ansible.builtin.shell: echo "{{ smtp_username }}" | docker secret create smtp_username -
      when: "'smtp_username' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Create Docker secret 'smtp_password' if not exists
      ansible.builtin.shell: echo "{{ smtp_password }}" | docker secret create smtp_password -
      when: "'smtp_password' not in existing_secrets.stdout_lines"
      no_log: true

    - name: Download Starship installation script
      ansible.builtin.get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/starship_install.sh
        mode: "0755"

    - name: Install Starship
      ansible.builtin.shell: /tmp/starship_install.sh --yes
      args:
        creates: /usr/local/bin/starship

    - name: Add Starship to bash profile for all users
      ansible.builtin.blockinfile:
        path: /etc/profile.d/starship.sh
        create: yes
        mode: "0755"
        block: |
          # Initialize Starship prompt
          if command -v starship >/dev/null 2>&1; then
            eval "$(starship init bash)"
          fi

    - name: Add Helix PPA
      ansible.builtin.apt_repository:
        repo: ppa:maveonair/helix-editor
        state: present

    - name: Install Helix
      ansible.builtin.apt:
        name: helix
        state: present
        update_cache: yes
events {}

http {
    limit_req_zone $binary_remote_addr zone=site_limit:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=2r/s;

    map $http_user_agent $block_bad_ua {
        default 0;
        "" 1;
        "~*curl|wget|python|Go-http-client|java|libwww|masscan|scanner|nmap|fetch|httpclient|sqlmap" 1;
    }

    # HTTP - Only used for redirect and Certbot challenge
    server {
        listen 80;
        server_name api.khoa.email;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS
    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name api.khoa.email;
        server_tokens off;

        resolver 1.1.1.1 8.8.8.8 valid=300s;
        resolver_timeout 5s;

        ssl_certificate     /etc/letsencrypt/live/api.khoa.email/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.khoa.email/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        client_max_body_size 10M;

        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        if ($block_bad_ua) {
            return 403;
        }

        if ($request_method !~ ^(GET|POST|HEAD|PUT|DELETE)$) {
            return 405;
        }

        location / {
            limit_req zone=site_limit burst=10 nodelay;
            limit_except GET HEAD { deny all; }

            root /var/www/html;
            index welcome.html index.html;
        }

        location = /index.html {
            limit_req zone=site_limit burst=10 nodelay;
            limit_except GET HEAD { deny all; }
            root /var/www/html;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
            root /var/www/html;
        }

        location /api/iam/ {
            limit_req zone=api_limit burst=5 nodelay;
            rewrite ^/api/iam/?(.*)$ /iam/$1 break;
            proxy_pass http://tasks.iam-service:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/patients/ {
            limit_req zone=api_limit burst=5 nodelay;
            rewrite ^/api/patients/?(.*)$ /patient/patients/$1 break;
            proxy_pass http://tasks.patient-service:8081;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/testorders/ {
            limit_req zone=api_limit burst=5 nodelay;
            rewrite ^/api/testorders/?(.*)$ /testorder/$1 break;
            proxy_pass http://tasks.testorder-service:8082;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Block hidden files and sensitive paths
        location ~ /\.(?!well-known) {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* ^/(actuator|env|metrics|beans|configprops|loggers|heapdump|threaddump|shutdown) {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* ^/api/.*/actuator {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* ^/(swagger-ui\.html|swagger-ui/|v3/api-docs|swagger-resources|webjars/springfox-swagger-ui) {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* /(b)?apply\.cgi {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* ^/\.well-known/security.txt {
            return 404;
            access_log off;
        }
    }
}
#!/bin/sh
set -e

echo "[wait-for-dns] Waiting for services dns to resolve..."

for i in $(seq 1 120); do
  if getent hosts tasks.patient-service > /dev/null; then
    echo "[wait-for-dns] DNS resolved!"
    break
  fi
  echo "[wait-for-dns] Still waiting..."
  sleep 1
done

echo "[wait-for-dns] Starting Nginx..."
exec nginx -g 'daemon off;'

variable "khoa_ssh_public_key" {
  description = "Khoa's SSH Public Key"
  type        = string
}

variable "anh_ssh_public_key" {
  description = "Tieu Anh's SSH Public Key"
  type        = string
}

variable "do_token" {
  description = "DigitalOcean API Token"
  type        = string
  sensitive   = true
}

variable "cloudflare_api_token" {
  description = "Cloudflare API Token"
  type        = string
  sensitive   = true
}

variable "cloudflare_zone_id" {
  description = "Cloudflare Zone ID"
  type        = string
  sensitive   = true
}
diff --git a/ansible/init_playbook.yml b/ansible/init_playbook.yml
deleted file mode 100644
index 46eab0a..0000000
--- a/ansible/init_playbook.yml
+++ /dev/null
@@ -1,487 +0,0 @@
----
-- name: Provision Microservices Server
-  hosts: all
-  become: yes
-  gather_facts: yes
-
-  vars_files:
-    - vars/password.yml
-
-  pre_tasks:
-    - name: Stop and mask automatic update services
-      ansible.builtin.systemd:
-        name: "{{ item }}"
-        state: stopped
-        masked: yes
-      loop:
-        - unattended-upgrades
-        - apt-daily.service
-        - apt-daily.timer
-        - apt-daily-upgrade.service
-        - apt-daily-upgrade.timer
-      ignore_errors: yes
-
-    - name: Wait a moment for processes to fully stop
-      ansible.builtin.pause:
-        seconds: 5
-
-    - name: Remove any stale lock files
-      ansible.builtin.file:
-        path: "{{ item }}"
-        state: absent
-      loop:
-        - /var/lib/dpkg/lock
-        - /var/lib/dpkg/lock-frontend
-        - /var/cache/apt/archives/lock
-      ignore_errors: yes
-
-    - name: Update apt cache
-      ansible.builtin.apt:
-        update_cache: yes
-        cache_valid_time: 3600
-        lock_timeout: 300
-      register: apt_update
-      retries: 3
-      delay: 10
-      until: apt_update is succeeded
-
-  tasks:
-    # --- Package Installation ---
-    - name: Install prerequisites and CLI tools
-      ansible.builtin.apt:
-        name:
-          - apt-transport-https
-          - ca-certificates
-          - curl
-          - gnupg
-          - lsb-release
-          - btop
-          - tree
-          - bat
-          - net-tools
-          - neofetch
-          - nginx
-          - nghttp2-client
-        state: present
-        lock_timeout: 300
-      register: apt_prereqs
-      retries: 3
-      delay: 10
-      until: apt_prereqs is succeeded
-
-    - name: Symlink batcat to bat
-      ansible.builtin.file:
-        src: /usr/bin/batcat
-        dest: /usr/local/bin/bat
-        state: link
-      when: ansible_facts['distribution'] == 'Ubuntu'
-
-    - name: Set timezone to Asia/Ho_Chi_Minh
-      ansible.builtin.timezone:
-        name: Asia/Ho_Chi_Minh
-
-    # --- User Management ---
-    - name: Create non-root user 'khoa'
-      ansible.builtin.user:
-        name: khoa
-        state: present
-        shell: /bin/bash
-        create_home: yes
-        groups: sudo
-        append: yes
-        password: "{{ khoa_password | password_hash('sha512') }}"
-
-    - name: Create .ssh directory for khoa
-      ansible.builtin.file:
-        path: /home/khoa/.ssh
-        state: directory
-        owner: khoa
-        group: khoa
-        mode: "0700"
-
-    - name: Copy root's authorized_keys to khoa
-      ansible.builtin.copy:
-        src: /root/.ssh/authorized_keys
-        dest: /home/khoa/.ssh/authorized_keys
-        owner: khoa
-        group: khoa
-        mode: "0600"
-        remote_src: yes
-
-    # --- SSH Configuration ---
-    - name: Disable ssh.socket
-      ansible.builtin.systemd:
-        name: ssh.socket
-        state: stopped
-        enabled: no
-
-    - name: Change SSH port to {{ ssh_port }}
-      ansible.builtin.lineinfile:
-        path: /etc/ssh/sshd_config
-        regexp: "^#?Port"
-        line: "Port {{ ssh_port }}"
-        backup: yes
-
-    - name: Disable password authentication
-      ansible.builtin.lineinfile:
-        path: /etc/ssh/sshd_config
-        regexp: "^#?PasswordAuthentication"
-        line: "PasswordAuthentication no"
-
-    - name: Disable root login
-      ansible.builtin.lineinfile:
-        path: /etc/ssh/sshd_config
-        regexp: "^#?PermitRootLogin"
-        line: "PermitRootLogin no"
-
-    - name: Enable PAM
-      ansible.builtin.lineinfile:
-        path: /etc/ssh/sshd_config
-        regexp: "^#?UsePAM"
-        line: "UsePAM yes"
-
-    - name: Validate SSH config
-      ansible.builtin.command: sshd -t
-
-    - name: Reload SSH service
-      ansible.builtin.systemd:
-        name: ssh
-        state: restarted
-
-    # --- Firewall Configuration ---
-    - name: Set UFW default incoming policy to deny
-      community.general.ufw:
-        direction: incoming
-        policy: deny
-
-    - name: Set UFW default outgoing policy to allow
-      community.general.ufw:
-        direction: outgoing
-        policy: allow
-
-    - name: Limit SSH (custom port)
-      community.general.ufw:
-        rule: limit
-        port: "{{ ssh_port }}"
-        proto: tcp
-
-    - name: Allow HTTP (port 80)
-      community.general.ufw:
-        rule: allow
-        port: "80"
-        proto: tcp
-
-    - name: Enable UFW
-      community.general.ufw:
-        state: enabled
-
-    # --- Scripts Setup ---
-    - name: Create scripts directory
-      ansible.builtin.file:
-        path: /opt/scripts
-        state: directory
-        owner: root
-        group: root
-        mode: "0755"
-
-    - name: Copy all scripts to server
-      ansible.builtin.copy:
-        src: ../scripts/
-        dest: /opt/scripts/
-        owner: root
-        group: root
-        mode: "0755"
-
-    - name: Run IP restriction script to allow HTTPS only from Cloudflare
-      ansible.builtin.shell: /opt/scripts/restrict-ips.sh
-      register: restrict_result
-
-    - name: Display IP restriction results
-      ansible.builtin.debug:
-        var: restrict_result.stdout_lines
-
-    # --- Dynamic Cloudflare IP Configuration ---
-    - name: Create nginx conf.d directory
-      ansible.builtin.file:
-        path: /etc/nginx/conf.d
-        state: directory
-        owner: root
-        group: root
-        mode: "0755"
-
-    - name: Copy Cloudflare IP updater script
-      ansible.builtin.copy:
-        src: ../scripts/update-ips-nginx.sh
-        dest: /opt/scripts/update-ips-nginx.sh
-        owner: root
-        group: root
-        mode: "0755"
-
-    - name: Generate initial Cloudflare IPs configuration
-      ansible.builtin.command: /opt/scripts/update-ips-nginx.sh
-      register: cf_ip_result
-
-    - name: Display Cloudflare IP update results
-      ansible.builtin.debug:
-        var: cf_ip_result.stdout_lines
-
-    - name: Set up weekly Cloudflare IP updates
-      ansible.builtin.cron:
-        name: "Update Cloudflare IPs for nginx"
-        minute: "0"
-        hour: "2"
-        weekday: "1"
-        job: "/opt/scripts/update-ips-nginx.sh"
-        user: root
-
-    - name: Set up weekly UFW Cloudflare IP updates
-      ansible.builtin.cron:
-        name: "Update UFW Cloudflare IP restrictions"
-        minute: "30"
-        hour: "2"
-        weekday: "1"
-        job: "/opt/scripts/restrict-ips.sh"
-        user: root
-
-    # --- SSL/TLS Certificate Setup ---
-    - name: Install certbot and nginx plugin
-      ansible.builtin.apt:
-        name:
-          - certbot
-          - python3-certbot-nginx
-        state: present
-        lock_timeout: 300
-      register: apt_certbot
-      retries: 3
-      delay: 10
-      until: apt_certbot is succeeded
-
-    - name: Generate Let's Encrypt certificate
-      ansible.builtin.command: >
-        certbot --nginx --non-interactive --agree-tos
-        --email {{ letsencrypt_email }}
-        --domains {{ domain_name }}
-        --redirect
-      register: certbot_result
-      failed_when: certbot_result.rc != 0
-
-    - name: Display certificate generation results
-      ansible.builtin.debug:
-        var: certbot_result.stdout_lines
-
-    - name: Set up automatic certificate renewal
-      ansible.builtin.cron:
-        name: "Renew Let's Encrypt certificates"
-        minute: "0"
-        hour: "12"
-        job: "/usr/bin/certbot renew --quiet"
-
-    # --- Nginx Configuration ---
-    - name: Start and enable nginx
-      ansible.builtin.systemd:
-        name: nginx
-        state: started
-        enabled: yes
-
-    - name: Copy nginx configuration
-      ansible.builtin.copy:
-        src: ../nginx/nginx.conf
-        dest: /etc/nginx/sites-available/default
-        owner: root
-        group: root
-        mode: "0644"
-        backup: yes
-
-    - name: Copy HTML files to web directory
-      ansible.builtin.copy:
-        src: ../nginx/html/
-        dest: /var/www/html/
-        owner: www-data
-        group: www-data
-        mode: "0644"
-        backup: yes
-
-    - name: Test nginx configuration
-      ansible.builtin.command: nginx -t
-      register: nginx_test
-      failed_when: nginx_test.rc != 0
-
-    - name: Reload nginx
-      ansible.builtin.systemd:
-        name: nginx
-        state: reloaded
-      when: nginx_test.rc == 0
-
-    # --- Microservices Directory Setup ---
-    - name: Create microservices directory
-      ansible.builtin.file:
-        path: /opt/microservices
-        state: directory
-        owner: root
-        group: root
-        mode: "0755"
-
-    - name: Copy swarm directory to /opt/microservices
-      ansible.builtin.copy:
-        src: ../swarm/
-        dest: /opt/microservices/
-        owner: root
-        group: root
-        mode: preserve
-        backup: yes
-
-    - name: Make shell scripts executable
-      ansible.builtin.file:
-        path: "/opt/microservices/scripts/{{ item }}"
-        mode: "0755"
-      loop:
-        - cleanup.sh
-        - deploy.sh
-        - logs.sh
-        - remove.sh
-
-    # --- Docker Installation ---
-    - name: Create directory for Docker GPG key
-      ansible.builtin.file:
-        path: /etc/apt/keyrings
-        state: directory
-        mode: "0755"
-
-    - name: Download Docker GPG key
-      ansible.builtin.get_url:
-        url: https://download.docker.com/linux/ubuntu/gpg
-        dest: /tmp/docker.gpg
-        mode: "0644"
-
-    - name: Add Docker GPG key
-      ansible.builtin.shell: |
-        gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
-        chmod 644 /etc/apt/keyrings/docker.gpg
-      args:
-        creates: /etc/apt/keyrings/docker.gpg
-
-    - name: Add Docker repository
-      ansible.builtin.apt_repository:
-        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_facts['lsb']['codename'] }} stable"
-        state: present
-        filename: docker
-
-    - name: Install Docker packages
-      ansible.builtin.apt:
-        name:
-          - docker-ce
-          - docker-ce-cli
-          - containerd.io
-          - docker-buildx-plugin
-          - docker-compose-plugin
-        state: present
-        update_cache: yes
-        lock_timeout: 300
-      register: apt_docker
-      retries: 3
-      delay: 10
-      until: apt_docker is succeeded
-
-    - name: Start and enable Docker service
-      ansible.builtin.systemd:
-        name: docker
-        state: started
-        enabled: yes
-
-    - name: Add current user to docker group
-      ansible.builtin.user:
-        name: "{{ ansible_user }}"
-        groups: docker
-        append: yes
-      when: ansible_user != 'root'
-
-    - name: Login to GitLab Container Registry with token as both username and password
-      ansible.builtin.shell: |
-        echo "{{ gitlab_token }}" | docker login registry.gitlab.com -u "{{ gitlab_token }}" --password-stdin
-      no_log: true
-
-    - name: Check if Swarm is already active
-      ansible.builtin.command: docker info
-      register: docker_info_result
-
-    - name: Initialize Docker Swarm if not active
-      ansible.builtin.command: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
-      when: "'Swarm: active' not in docker_info_result.stdout"
-      register: swarm_init_result
-      changed_when: "'Swarm initialized' in swarm_init_result.stdout"
-
-    # --- Docker Secrets Management ---
-    - name: Check existing Docker secrets
-      ansible.builtin.shell: docker secret ls --format '{{ "{{.Name}}" }}'
-      register: existing_secrets
-      changed_when: false
-
-    - name: Create Docker secret 'db_password' if not exists
-      ansible.builtin.shell: echo "{{ db_password }}" | docker secret create db_password -
-      when: "'db_password' not in existing_secrets.stdout_lines"
-      no_log: true
-
-    - name: Create Docker secret 'db_username' if not exists
-      ansible.builtin.shell: echo "{{ db_username }}" | docker secret create db_username -
-      when: "'db_username' not in existing_secrets.stdout_lines"
-      no_log: true
-
-    - name: Create Docker secret 'db_url' (IAM service) if not exists
-      ansible.builtin.shell: echo "{{ iam_db_url }}" | docker secret create db_url -
-      when: "'db_url' not in existing_secrets.stdout_lines"
-      no_log: true
-
-    - name: Create Docker secret 'patient_db_url' if not exists
-      ansible.builtin.shell: echo "{{ patient_db_url }}" | docker secret create patient_db_url -
-      when: "'patient_db_url' not in existing_secrets.stdout_lines"
-      no_log: true
-
-    - name: Create Docker secret 'testorder_db_url' if not exists
-      ansible.builtin.shell: echo "{{ testorder_db_url }}" | docker secret create testorder_db_url -
-      when: "'testorder_db_url' not in existing_secrets.stdout_lines"
-      no_log: true
-
-    - name: Create Docker secret 'smtp_username' if not exists
-      ansible.builtin.shell: echo "{{ smtp_username }}" | docker secret create smtp_username -
-      when: "'smtp_username' not in existing_secrets.stdout_lines"
-      no_log: true
-
-    - name: Create Docker secret 'smtp_password' if not exists
-      ansible.builtin.shell: echo "{{ smtp_password }}" | docker secret create smtp_password -
-      when: "'smtp_password' not in existing_secrets.stdout_lines"
-      no_log: true
-
-    # --- Shell Customization ---
-    - name: Download Starship installation script
-      ansible.builtin.get_url:
-        url: https://starship.rs/install.sh
-        dest: /tmp/starship_install.sh
-        mode: "0755"
-
-    - name: Install Starship
-      ansible.builtin.shell: /tmp/starship_install.sh --yes
-      args:
-        creates: /usr/local/bin/starship
-
-    - name: Add Starship to bash profile for all users
-      ansible.builtin.blockinfile:
-        path: /etc/profile.d/starship.sh
-        create: yes
-        mode: "0755"
-        block: |
-          # Initialize Starship prompt
-          if command -v starship >/dev/null 2>&1; then
-            eval "$(starship init bash)"
-          fi
-
-    # --- HELIX --- #
-    - name: Add Helix PPA
-      ansible.builtin.apt_repository:
-        repo: ppa:maveonair/helix-editor
-        state: present
-
-    - name: Install Helix
-      ansible.builtin.apt:
-        name: helix
-        state: present
-        update_cache: yes
diff --git a/ansible/scripts/init.sh b/ansible/scripts/init.sh
index 1bdadf5..b248f94 100755
--- a/ansible/scripts/init.sh
+++ b/ansible/scripts/init.sh
@@ -5,7 +5,7 @@ PROJECT_ROOT="$(dirname "$0")/../.."
 TERRAFORM_DIR="$PROJECT_ROOT/terraform"
 ANSIBLE_DIR="$PROJECT_ROOT/ansible"
 INVENTORY_FILE="$ANSIBLE_DIR/inventory.ini"
-SSH_PORT=1309
+source "$ANSIBLE_DIR/.env"
 
 # Generate inventory.ini
 echo "[servers]" > "$INVENTORY_FILE"
@@ -22,6 +22,6 @@ ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \
     -i "$INVENTORY_FILE" \
     --private-key ~/.ssh/id_ed25519 \
     -u root \
-    "$ANSIBLE_DIR/init_playbook.yml" \
+    "$ANSIBLE_DIR/playbook.yml" \
     --ask-vault-pass \
     -e ssh_port=$SSH_PORT
diff --git a/ansible/scripts/re-run.sh b/ansible/scripts/re-run.sh
index 90d5142..c0c21dd 100755
--- a/ansible/scripts/re-run.sh
+++ b/ansible/scripts/re-run.sh
@@ -5,12 +5,12 @@ PROJECT_ROOT="$(dirname "$0")/../.."
 TERRAFORM_DIR="$PROJECT_ROOT/terraform"
 ANSIBLE_DIR="$PROJECT_ROOT/ansible"
 INVENTORY_FILE="$ANSIBLE_DIR/inventory.ini"
-SSH_PORT=1309
+source "$ANSIBLE_DIR/.env"
 
 # Generate inventory.ini
 echo "[servers]" > "$INVENTORY_FILE"
 terraform -chdir="$TERRAFORM_DIR" output -json droplet_ips \
-  | jq -r '.[] | . + " ansible_port=1309"' \
+  | jq -r --arg port "$SSH_PORT" '.[] | . + " ansible_port=" + $port' \
   >> "$INVENTORY_FILE"
 
 echo "Generated inventory:"
@@ -23,6 +23,6 @@ ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \
     --private-key ~/.ssh/id_ed25519 \
     -u khoa \
     -e ssh_port=$SSH_PORT \
-    "$ANSIBLE_DIR/init_playbook.yml" \
+    "$ANSIBLE_DIR/playbook.yml" \
     --ask-vault-pass \
     --ask-become-pass
diff --git a/nginx/html/favicon.ico b/nginx/html/favicon.ico
deleted file mode 100644
index e69de29..0000000
diff --git a/nginx/html/robots.txt b/nginx/html/robots.txt
deleted file mode 100644
index 1f53798..0000000
--- a/nginx/html/robots.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-User-agent: *
-Disallow: /
diff --git a/nginx/html/welcome.html b/nginx/html/welcome.html
deleted file mode 100644
index 56b3bac..0000000
--- a/nginx/html/welcome.html
+++ /dev/null
@@ -1,116 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <link
-      rel="icon"
-      href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>🐬</text></svg>"
-    >
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Welcome Page</title>
-    <style>
-        * {
-            margin: 0;
-            padding: 0;
-            box-sizing: border-box;
-        }
-
-        body {
-            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
-            display: flex;
-            flex-direction: column;
-            justify-content: center;
-            align-items: center;
-            min-height: 100vh;
-            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
-            color: white;
-            text-align: center;
-            padding: 20px;
-        }
-
-        .container {
-            max-width: 600px;
-            opacity: 0;
-            transform: translateY(20px);
-            animation: fadeInUp 1s ease-out forwards;
-        }
-
-        h1 {
-            font-size: 2.5rem;
-            font-weight: 300;
-            margin-bottom: 1rem;
-            letter-spacing: -0.02em;
-        }
-
-        .accent {
-            font-weight: 600;
-            background: linear-gradient(45deg, #ff6b6b, #ffd93d);
-            -webkit-background-clip: text;
-            -webkit-text-fill-color: transparent;
-            background-clip: text;
-        }
-
-        p {
-            font-size: 1.1rem;
-            opacity: 0.9;
-            font-weight: 300;
-            margin-bottom: 2rem;
-        }
-
-        .status-indicator {
-            display: inline-flex;
-            align-items: center;
-            gap: 0.5rem;
-            font-size: 0.9rem;
-            padding: 0.5rem 1rem;
-            background: rgba(255, 255, 255, 0.1);
-            border-radius: 50px;
-            backdrop-filter: blur(10px);
-            border: 1px solid rgba(255, 255, 255, 0.2);
-        }
-
-        .status-dot {
-            width: 8px;
-            height: 8px;
-            background: #00ff88;
-            border-radius: 50%;
-            animation: pulse 2s infinite;
-        }
-
-        @keyframes fadeInUp {
-            to {
-                opacity: 1;
-                transform: translateY(0);
-            }
-        }
-
-        @keyframes pulse {
-            0%, 100% {
-                opacity: 1;
-            }
-            50% {
-                opacity: 0.5;
-            }
-        }
-
-        @media (max-width: 768px) {
-            h1 {
-                font-size: 2rem;
-            }
-            p {
-                font-size: 1rem;
-            }
-        }
-    </style>
-</head>
-<body>
-    <div class="container">
-        <h1>Welcome to <span class="accent">Group 2's</span> Server</h1>
-        <p>Everything is running smoothly and ready to serve.</p>
-        <div class="status-indicator">
-            <div class="status-dot"></div>
-            <span>Online</span>
-        </div>
-    </div>
-</body>
-</html>
diff --git a/nginx/nginx.conf b/nginx/nginx.conf
deleted file mode 100644
index 8ce17ec..0000000
--- a/nginx/nginx.conf
+++ /dev/null
@@ -1,148 +0,0 @@
-server_tokens off;
-
-# Rate limit zones
-limit_req_zone $binary_remote_addr zone=site_limit:10m rate=5r/s;
-limit_req_zone $binary_remote_addr zone=api_limit:10m rate=2r/s;
-
-# Block sketchy user-agents
-map $http_user_agent $block_bad_ua {
-    default 0;
-    "" 1;
-    "~*curl|wget|python|Go-http-client|java|libwww|masscan|scanner|nmap|fetch|httpclient|sqlmap" 1;
-}
-
-# Detect if request is really from Cloudflare
-include /etc/nginx/conf.d/cloudflare-ips.conf;
-
-map $is_cloudflare $realip_header {
-    1 "CF-Connecting-IP";
-    0 "X-Forwarded-For"; # fallback if not from CF
-}
-
-real_ip_header $realip_header;
-
-server {
-    listen 443 ssl;
-    listen [::]:443 ssl ipv6only=on;
-    server_name microservices.khoa.email;
-
-    # SSL settings
-    include /etc/letsencrypt/options-ssl-nginx.conf;
-    
-    ssl_certificate /etc/letsencrypt/live/microservices.khoa.email/fullchain.pem;
-    ssl_certificate_key /etc/letsencrypt/live/microservices.khoa.email/privkey.pem;
-    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
-    
-    resolver 1.1.1.1 8.8.8.8 valid=300s;
-    resolver_timeout 5s;
-
-    client_max_body_size 10M;
-
-    # Security headers
-    add_header X-Content-Type-Options nosniff;
-    add_header X-Frame-Options DENY;
-    add_header X-XSS-Protection "1; mode=block";
-    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
-
-    # Block sketchy UAs
-    if ($block_bad_ua) {
-        return 403;
-    }
-
-    # Only allow GET, POST, HEAD, PUT, DELETE globally
-    if ($request_method !~ ^(GET|POST|HEAD|PUT|DELETE)$) {
-        return 405;
-    }
-
-    # Main site
-    location / {
-        limit_req zone=site_limit burst=10 nodelay;
-        limit_except GET HEAD { deny all; }
-
-        root /var/www/html;
-        index welcome.html index.html;
-    }
-
-    location = /index.html {
-        limit_req zone=site_limit burst=10 nodelay;
-        limit_except GET HEAD { deny all; }
-        root /var/www/html;
-    }
-
-    # Dummy favicon to reduce log noise
-    location = /favicon.ico {
-        log_not_found off;
-        access_log off;
-        root /var/www/html;
-    }
-
-    # ======================
-    # Backend Service Routes
-    # ======================
-
-    location /api/iam/ {
-        limit_req zone=api_limit burst=5 nodelay;
-        rewrite ^/api/iam/?(.*)$ /iam/$1 break;
-        proxy_pass http://127.0.0.1:8080;
-        proxy_set_header Host $host;
-        proxy_set_header X-Real-IP $remote_addr;
-        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
-    }
-
-    location /api/patients/ {
-        limit_req zone=api_limit burst=5 nodelay;
-        rewrite ^/api/patients/?(.*)$ /patient/patients/$1 break;
-        proxy_pass http://127.0.0.1:8081;
-        proxy_set_header Host $host;
-        proxy_set_header X-Real-IP $remote_addr;
-        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
-    }
-
-    location /api/testorders/ {
-        limit_req zone=api_limit burst=5 nodelay;
-        rewrite ^/api/testorders/?(.*)$ /testorder/$1 break;
-        proxy_pass http://127.0.0.1:8082;
-        proxy_set_header Host $host;
-        proxy_set_header X-Real-IP $remote_addr;
-        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
-    }
-
-    # =========================
-    # Blocking bad/unused paths
-    # =========================
-
-    location ~ /\.(?!well-known) {
-        deny all;
-        access_log off;
-        log_not_found off;
-    }
-
-    location ~* ^/(actuator|env|metrics|beans|configprops|loggers|heapdump|threaddump|shutdown) {
-        deny all;
-        access_log off;
-        log_not_found off;
-    }
-
-    location ~* ^/api/.*/actuator {
-        deny all;
-        access_log off;
-        log_not_found off;
-    }
-
-    location ~* ^/(swagger-ui\.html|swagger-ui/|v3/api-docs|swagger-resources|webjars/springfox-swagger-ui) {
-        deny all;
-        access_log off;
-        log_not_found off;
-    }
-
-    location ~* /(b)?apply\.cgi {
-        deny all;
-        access_log off;
-        log_not_found off;
-    }
-
-    location ~* ^/\.well-known/security.txt {
-        return 404;
-        access_log off;
-    }
-}
diff --git a/scripts/update-ips-nginx.sh b/scripts/update-ips-nginx.sh
index 6d36023..1a5db26 100755
--- a/scripts/update-ips-nginx.sh
+++ b/scripts/update-ips-nginx.sh
@@ -2,7 +2,7 @@
 set -e
 
 TEMP_CONF="/tmp/nginx_cf_ips.conf"
-TARGET_CONF="/etc/nginx/conf.d/cloudflare-ips.conf"
+TARGET_CONF="/opt/microservices/nginx_config/cloudflare-ips.conf"
 
 echo "Fetching Cloudflare IP ranges..."
 CLOUDFLARE_IPV4=$(curl -s https://www.cloudflare.com/ips-v4)
@@ -15,29 +15,18 @@ geo $is_cloudflare {
     default 0;
 EOF
 
-# Add IPv4 ranges
 for ip in $CLOUDFLARE_IPV4; do
     echo "    $ip 1;" >> "$TEMP_CONF"
 done
 
-# Add IPv6 ranges  
 for ip in $CLOUDFLARE_IPV6; do
     echo "    $ip 1;" >> "$TEMP_CONF"
 done
 
 echo "}" >> "$TEMP_CONF"
 
-# Move the generated file to nginx conf directory
+mkdir -p "$(dirname "$TARGET_CONF")"
 mv "$TEMP_CONF" "$TARGET_CONF"
 
-# Test nginx config
-nginx -t
-
-if [ $? -eq 0 ]; then
-    echo "Reloading nginx..."
-    systemctl reload nginx
-    echo "Cloudflare IPs updated successfully"
-else
-    echo "Nginx config test failed"
-    exit 1
-fi
+echo "Cloudflare IPs updated successfully in $TARGET_CONF"
+echo "A 'docker service update' is required to apply changes."
diff --git a/swarm/compose.yml b/swarm/compose.yml
index 9e67993..557c471 100644
--- a/swarm/compose.yml
+++ b/swarm/compose.yml
@@ -1,8 +1,38 @@
 services:
+  nginx-proxy:
+    image: nginx:1.27.0-alpine
+    ports:
+      - mode: host
+        protocol: tcp
+        published: 80
+        target: 80
+      - mode: host
+        protocol: tcp
+        published: 443
+        target: 443
+    volumes:
+      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
+      - ./nginx/html:/var/www/html:ro
+      - ./nginx/wait-for-dns.sh:/wait-for-dns.sh:ro
+      - ./certbot/conf:/etc/letsencrypt
+      - ./certbot/www:/var/www/certbot
+    entrypoint: ["sh", "/wait-for-dns.sh"]
+    networks:
+      - microservices-network
+    deploy:
+      replicas: 1
+      placement:
+        constraints: [node.role == manager]
+      restart_policy:
+        condition: on-failure
+    # healthcheck:
+    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
+    #   interval: 30s
+    #   timeout: 10s
+    #   retries: 3
+
   iam-service:
     image: registry.gitlab.com/healthcare5314327/microservices/iam-service:latest
-    ports:
-      - "8080:8080"
     environment:
       SPRING_PROFILES_ACTIVE: production
       MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health
@@ -13,7 +43,7 @@ services:
       - db_url
       - db_username
       - smtp_username
-      - smtp_password 
+      - smtp_password
     entrypoint:
       - sh
       - -c
@@ -63,8 +93,6 @@ services:
 
   patient-service:
     image: registry.gitlab.com/healthcare5314327/microservices/patient-service:latest
-    ports:
-      - "8081:8081"
     environment:
       SPRING_PROFILES_ACTIVE: production
       MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health
@@ -120,8 +148,6 @@ services:
 
   testorder-service:
     image: registry.gitlab.com/healthcare5314327/microservices/testorder-service:latest
-    ports:
-      - "8082:8082"
     environment:
       SPRING_PROFILES_ACTIVE: production
       MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health
@@ -181,6 +207,10 @@ networks:
     driver: overlay
     attachable: true
 
+volumes:
+  nginx_config:
+    external: true
+
 secrets:
   db_password:
     external: true
diff --git a/terraform/keys/anh.pub b/terraform/keys/anh.pub
deleted file mode 100644
index cb7d792..0000000
--- a/terraform/keys/anh.pub
+++ /dev/null
@@ -1 +0,0 @@
-ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPCYeZ0CvAHuBxzHZZaWvr7R1LioqOc3xKeWZIM5+ANE anh.nguyen945@gmail.com
diff --git a/terraform/keys/khoadesktop.pub b/terraform/keys/khoadesktop.pub
deleted file mode 100644
index 8151280..0000000
--- a/terraform/keys/khoadesktop.pub
+++ /dev/null
@@ -1 +0,0 @@
-ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICqDCNTzGHvwB5aMvl763LAgyBc67PtojLymgyfvlmoW khoatrandd.139@gmail.com
diff --git a/terraform/keys/khoalaptop.pub b/terraform/keys/khoalaptop.pub
deleted file mode 100644
index 2df456c..0000000
--- a/terraform/keys/khoalaptop.pub
+++ /dev/null
@@ -1 +0,0 @@
-ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGOHHdSpo4Hl90uU6YDekcBxDmw14oDvcdUks1xFERc8 ovn6002@gmail.com
diff --git a/terraform/main.tf b/terraform/main.tf
index e027152..10fa817 100644
--- a/terraform/main.tf
+++ b/terraform/main.tf
@@ -4,37 +4,81 @@ terraform {
       source  = "digitalocean/digitalocean"
       version = "~> 2.0"
     }
+    cloudflare = {
+      source  = "cloudflare/cloudflare"
+      version = "~> 5"
+    }
   }
 }
 
 provider "digitalocean" {
+  token = var.do_token
 }
 
-resource "digitalocean_ssh_key" "khoadesktop" {
-  name       = "Khoa's DigitalOcean SSH key"
-  public_key = file("${path.module}/keys/khoadesktop.pub")
+provider "cloudflare" {
+  api_token = var.cloudflare_api_token
 }
 
-resource "digitalocean_ssh_key" "khoalaptop" {
-  name       = "Khoa's DigitalOcean SSH key"
-  public_key = file("${path.module}/keys/khoalaptop.pub")
-}
+# resource "digitalocean_ssh_key" "khoa" {
+#   name       = "Khoa's DigitalOcean SSH key"
+#   public_key = var.khoa_ssh_public_key
+# }
 
 resource "digitalocean_ssh_key" "anh" {
-  name       = "Anh's DigitalOcean SSH key"
-  public_key = file("${path.module}/keys/anh.pub")
+  name       = "Tieu Anh's DigitalOcean SSH key"
+  public_key = var.anh_ssh_public_key
 }
 
-resource "digitalocean_droplet" "microservices" {
+data "digitalocean_ssh_key" "khoa" {
+  name = "Khoa SSH key"
+}
+
+# data "digitalocean_ssh_key" "anh" {
+#   name = "Tieu Anh's DigitalOcean SSH key"
+# }
+
+resource "cloudflare_dns_record" "microservices_subdomain" {
+  zone_id = var.cloudflare_zone_id
+  // --- SUB DOMAIN NAME --- //
+  name    = "api"
+  type    = "A"
+  content = digitalocean_loadbalancer.nodes.ip
+  ttl     = 1
+  proxied = true
+}
+
+resource "digitalocean_loadbalancer" "nodes" {
+  name   = "nodes-load-balancer"
+  region = "sgp1"
+
+  forwarding_rule {
+    entry_port     = 80
+    entry_protocol = "http"
+
+    target_port     = 80
+    target_protocol = "http"
+  }
+
+  healthcheck {
+    protocol = "http"
+    port     = 80
+    path     = "/"
+  }
+
+  droplet_ids = digitalocean_droplet.nodes.*.id
+}
+
+resource "digitalocean_droplet" "nodes" {
   count  = 1
   image  = "ubuntu-24-04-x64"
-  name   = "microservices-${count.index + 1}"
+  name   = "nodes-${count.index + 1}"
   region = "sgp1"
   size   = "s-4vcpu-8gb-intel"
   ssh_keys = [
-    digitalocean_ssh_key.khoadesktop.id,
-    digitalocean_ssh_key.khoalaptop.id,
+    # digitalocean_ssh_key.khoa.id,
     digitalocean_ssh_key.anh.id,
+    data.digitalocean_ssh_key.khoa.id,
+    # data.digitalocean_ssh_key.anh.id,
   ]
 
   # provisioner "local-exec" {
@@ -52,6 +96,9 @@ resource "digitalocean_droplet" "microservices" {
 }
 
 output "droplet_ips" {
-  value = [for droplet in digitalocean_droplet.microservices : droplet.ipv4_address]
+  value = [for droplet in digitalocean_droplet.nodes : droplet.ipv4_address]
 }
 
+output "load_balancer_ip" {
+  value = digitalocean_loadbalancer.nodes.ip
+}
diff --git a/terraform/scripts/apply.sh b/terraform/scripts/apply.sh
deleted file mode 100755
index 38287b4..0000000
--- a/terraform/scripts/apply.sh
+++ /dev/null
@@ -1,9 +0,0 @@
-#!/bin/bash
-
-set -e
-
-SCRIPT_DIR="$(dirname "$0")"
-
-source "$SCRIPT_DIR"/../.env
-
-DIGITALOCEAN_TOKEN=$DIGITALOCEAN_TOKEN terraform apply
diff --git a/terraform/scripts/destroy.sh b/terraform/scripts/destroy.sh
deleted file mode 100755
index 6a58a04..0000000
--- a/terraform/scripts/destroy.sh
+++ /dev/null
@@ -1,9 +0,0 @@
-#!/bin/bash
-
-set -e
-
-SCRIPT_DIR="$(dirname "$0")"
-
-source "$SCRIPT_DIR"/../.env
-
-DIGITALOCEAN_TOKEN=$DIGITALOCEAN_TOKEN terraform destroy
